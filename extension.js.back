// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
const vscode = require('vscode');
const editor = vscode.window.activeTextEditor;
const fs = require("fs");

const htmlData = `<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
</head>
<body>
	
</body>
</html>
`;

const cssData = `*{
	margin: 0px;
	padding: 0px;
	box-sizing: border-box;
}`;

const htmlJSData = `<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
</head>
<body>
	
</body>
<script src="./sources/js/main.js"></script>
</html>
`;

const htmlCSSData = `<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>

	<link rel="stylesheet" href="./sources/css/style.css">
</head>
<body>
	
</body>
</html>
`;

const htmlJSCSSData = `<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>

	<link rel="stylesheet" href="./sources/css/style.css">
</head>
<body>
	
</body>
<script src="./sources/js/main.js"></script>
</html>
`;

async function CreateHTMLDirectory(){
	const choice = await vscode.window.showInputBox({
		placeHolder: "1 : html only | 2 : html+css | 3: html+js | 4: html+css+js"
	});

	vscode.window.showInformationMessage(choice);
}


function activate(context) {

	let html = vscode.commands.registerCommand("extension.html", function() {
		CreateHTMLDirectory();
	});

	let test = vscode.commands.registerCommand('htmlcreator.test', function () {
		const input = await vscode.window.showInputBox();
		vscode.window.showInformationMessage(input);

		if(vscode.workspace.workspaceFolders !== undefined) {
			let f = vscode.workspace.workspaceFolders[0].uri.fsPath ; 

			fs.mkdir(f+"/sources/js", {recursive: true}, function(err) {
				if (err) {
				  console.log(err)
				}
			})

			fs.mkdir(f+"/sources/css", {recursive: true}, function(err) {
				if (err) {
				  console.log(err)
				}
			})

			
			fs.mkdir(f+"/sources/image", {recursive: true}, function(err) {
				if (err) {
				  console.log(err)
				}
			})

			fs.appendFile(f+'/index.html', htmlData, function (err) {
				if (err) throw err;
			});

			message = `YOUR-EXTENSION: folder: ${wf} - ${f}` ;
		
			vscode.window.showInformationMessage(message);
		} 
		else {
			message = "YOUR-EXTENSION: Working folder not found, open a folder an try again" ;
		
			vscode.window.showErrorMessage(message);
		}
	});

	let css = vscode.commands.registerCommand('htmlcreator.css', function () {
		if(vscode.workspace.workspaceFolders !== undefined) {
			let f = vscode.workspace.workspaceFolders[0].uri.fsPath ; 

			fs.mkdir(f+"/sources/js", {recursive: true}, function(err) {
				if (err) {
				  console.log(err)
				}
			})

			fs.mkdir(f+"/sources/css", {recursive: true}, function(err) {
				if (err) {
				  console.log(err)
				} else {
					fs.appendFile(f+'/sources/css/style.css', cssData, function (err) {
						if (err) throw err;
					});
				}
			})

			
			fs.mkdir(f+"/sources/image", {recursive: true}, function(err) {
				if (err) {
				  console.log(err)
				}
			})


			fs.appendFile(f+'/index.html', htmlCSSData, function (err) {
				if (err) throw err;
			});

			message = "COUCOU" ;
		
			vscode.window.showErrorMessage(message);
		} 
		else {
			message = "YOUR-EXTENSION: Working folder not found, open a folder an try again" ;
		
			vscode.window.showErrorMessage(message);
		}
	});

	let js = vscode.commands.registerCommand('htmlcreator.js', function () {
		if(vscode.workspace.workspaceFolders !== undefined) {
			let f = vscode.workspace.workspaceFolders[0].uri.fsPath ; 

			fs.mkdir(f+"/sources/js", {recursive: true}, function(err) {
				if (err) {
				  console.log(err)
				} else {
					fs.appendFile(f+'/sources/js/main.js', '', function (err) {
						if (err) throw err;
					});
				}
			})

			fs.mkdir(f+"/sources/css", {recursive: true}, function(err) {
				if (err) {
				  console.log(err)
				}
			})

			
			fs.mkdir(f+"/sources/image", {recursive: true}, function(err) {
				if (err) {
				  console.log(err)
				}
			})


			fs.appendFile(f+'/index.html', htmlJSData, function (err) {
				if (err) throw err;
			});

			message = "Dossier crée" ;
		
			vscode.window.showInformationMessage(message);
		} 
		else {
			message = "YOUR-EXTENSION: Working folder not found, open a folder an try again" ;
		
			vscode.window.showErrorMessage(message);
		}
	});

	let jscss = vscode.commands.registerCommand('htmlcreator.cssjs', function () {
		if(vscode.workspace.workspaceFolders !== undefined) {
			let f = vscode.workspace.workspaceFolders[0].uri.fsPath ; 

			fs.mkdir(f+"/sources/js", {recursive: true}, function(err) {
				if (err) {
				  console.log(err)
				} else {
					fs.appendFile(f+'/sources/js/main.js', '', function (err) {
						if (err) throw err;
					});
				}
			})

			fs.mkdir(f+"/sources/css", {recursive: true}, function(err) {
				if (err) {
					console.log(err)
				  } else {
					  fs.appendFile(f+'/sources/css/style.css', cssData, function (err) {
						  if (err) throw err;
					  });
				  }
			})

			
			fs.mkdir(f+"/sources/image", {recursive: true}, function(err) {
				if (err) {
				  console.log(err)
				}
			})


			fs.appendFile(f+'/index.html', htmlJSCSSData, function (err) {
				if (err) throw err;
			});

			message = "Dossier crée" ;
		
			vscode.window.showInformationMessage(message);
		} 
		else {
			message = "YOUR-EXTENSION: Working folder not found, open a folder an try again" ;
		
			vscode.window.showErrorMessage(message);
		}
	});

	context.subscriptions.push(html);
}

module.exports = {
	activate
}
